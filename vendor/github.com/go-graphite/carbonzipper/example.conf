# NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
#
# A single shell-style (#) comment block may appear at the top of the file
# and will be stripped off. However, the remainder of the file must be valid JSON.
# (So the `//` comments below will cause it to fail)
# (grep -v '^#\|\/\/\s' example.conf | jq '.') will extract the JSON.
#
# NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
{
    // Listen port
    "Port": 8080,

    // Your preferred GOMAXPROCS setting; if you wish to override it in config
    // rather than the environment.
    "MaxProcs": 0,

    // Graphite, "host:port", to send zipper's metrics to.
    "GraphiteHost": "",

    // Interval seconds to send zipper's own metrics.
    "IntervalSec": 60,

    // Metric sent to graphite will be prefixed with "$InternalMetricPrefix.$hostname.",
    // default is "carbon.zipper"
    "InternalMetricPrefix": "carbon.zipper",

    // Number of 100ms buckets to track request distribution in. Used to build
    // 'carbon.zipper.hostname.requests_in_0ms_to_100ms' metric and friends.
    // Requests beyond the last bucket are logged as slow
    // (default of 10 implies "slow" is >1 second).
    "Buckets": 10,

    // Maximum total backend requesting timeout in ms.
    // ( How long we may spend making requests. )
    "TimeoutMs": 10000,

    // Timeout, in ms, once the final backend has been contacted.
    // ( [Effectively] How long we'll wait for the slowest response. )
    "TimeoutMsAfterAllStarted": 2000,

    // Number of concurrent requests to any given backend - default is no limit.
    // If set, you likely want >= MaxIdleConnsPerHost
    "ConcurrencyLimitPerServer": 0,

    // Control http.MaxIdleConnsPerHost. Large values can lead to more idle
    // connections on the backend servers which may bump into limits; tune with care.
    "MaxIdleConnsPerHost": 100,

    // "http://host:port" array of instances of carbonserver stores
    // This is the *ONLY* config element that MUST be specified.
    "Backends":
    [
        "http://10.0.0.1:8080",
        "http://10.0.0.2:8080",
        "http://192.168.0.100:8080",
        "http://192.168.0.200:8080",
        "http://192.168.1.212:8080"
    ],

    // Instance of carbonsearch backend
    "SearchBackend": "http://127.0.0.1:8070",

    // carbonsearch prefix to reserve/register
    "SearchPrefix": "virt.v1.*",

    // Configuration for the logger
    // It's possible to specify multiple logger outputs with different loglevels and encodings
    // Logger is logrotate-compatible, you can freely move or rename or delete files, it will create
    // new one automatically
    "Logger": [{
        // Available Loggers:
        //   "" - global for all
        //   "main" - what's before start
        //   "find" - for find handler
        //   "info" - for info handler
        //   "loadbalancer" - for lb handler
        //   "probe" - for background probes
        //   "render" - for render handler
        //   "slow" - slow query log ("Slow reuqest" messages)
        //   "access" - access logs (requests, times, etc)
	// Please note that if you want to have all logs going to stdout and access logs going to file, you need to define 2 sections for access logger (file + stdout) + one section for logger ""
        "Logger": "",
        // Available options:
        //   "/some/file"
        //   "stderr"
        //   "stdout"
        //   "" (=="stderr")
        //   "none"
        // default: "stdout"
        "File": "stderr",
        // "debug", "info", "warn", "error", "fatal", "panic" are available
        // default: info
        "Level": "debug",
        // "json" or "console", default: console
        "Encoding": "console",
        // Time format (for timestamps in the logs), default: iso8601
        // Available: "millis", "nanos", "epoch", "iso8601"
        "EncodingTime": "iso8601",
        // Format to encode durations, default: seconds.
        // Available: "seconds", "nanos", "string"
        "EncodingDuration": "seconds"
    },
    {
        "Logger": "",
        "File": "zipper.log",
        "Level": "info",
	"Encoding": "json"
    }]
}
